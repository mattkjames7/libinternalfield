import numpy as np
import os
import platform
from .ReadASCII import ReadASCII
from .WriteASCII import WriteASCII

def _ldSymbols(planet,name):
	'''
	return the names of the symbols generated by ld
	'''

	tmp = '_binary_coeffs_{:s}_{:s}_bin_'.format(planet,name)
	stsym = tmp + 'start'
	lnsym = tmp + 'size'

	return stsym,lnsym


def _xxdSymbols(planet,name):

	tmp = 'coeffs_{:s}_{:s}_bin'.format(planet,name)
	stsym = tmp
	lnsym = tmp + '_len'
	return stsym,lnsym


def _replaceSymbols(planet,name):

	cname = 'coeffs/'+planet+'/'+name+'_bin.cc'

	xst,xln = _xxdSymbols(planet,name)
	lst,lln = _ldSymbols(planet,name)

	lines = ReadASCII(cname)
	nl = len(lines)


	#replace the first symbol
	for i in range(0,nl):
		if xst in lines[i]:
			lines[i] = lines[i].replace(xst,lst)
			break

	#replace the second symbol
	for i in range(0,nl):
		if xln in lines[i]:
			lines[i] = lines[i].replace(xln,lln)
			break

	#write the file
	WriteASCII(cname,lines)

def MakeCoeffObject(bdir,planet,name):
	'''
	Convert the binary file coefficients to object files which have an 
	address that can be used in C++
	
	'''
	
	binname = 'coeffs/'+planet+'/'+name+'.bin'

	#get the object name name
	oname = 'coeffs/'+planet+'/'+name+'.o'
	cname = 'coeffs/'+planet+'/'+name+'_bin.cc'
	
	#get the OS
	OS = platform.system()

	if OS in ['Windows','Linux']:
		#use ld
		cmd = 'ld -r -b binary '+binname+' -o '+oname
		os.system(cmd)
	else:
		#use xxd
		cmd = 'xxd -i '+binname+' > '+cname
		os.system(cmd)
		_replaceSymbols(planet,name)
		cmd = 'gcc -c '+cname+' -o '+oname
		os.system(cmd)
		cmd = 'rm -v '+cname
		os.system(cmd)
	
	#move it to the build directory
	vdir = bdir + '/coef'
	if not os.path.isdir(vdir):
		os.makedirs(vdir)
	bfname = vdir + '/' + os.path.basename(oname)

	cmd = 'mv -v '+oname+' '+bfname
	os.system(cmd)